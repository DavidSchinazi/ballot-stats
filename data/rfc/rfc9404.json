{
  "all_ballots": {
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2022-12-15 03:36:42-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-15 03:36:42-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Andrew Alston": [
      {
        "ad": "Andrew Alston",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Eric Vyncke": [
      {
        "ad": "Eric Vyncke",
        "end": "2022-12-13 22:45:57-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Eric Vyncke",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-13 22:45:57-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Erik Kline": [
      {
        "ad": "Erik Kline",
        "end": "2022-12-08 22:58:11-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Erik Kline",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-08 22:58:11-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Francesca Palombini": [
      {
        "ad": "Francesca Palombini",
        "end": "2022-12-15 06:56:23-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Francesca Palombini",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-15 06:56:23-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "John Scudder": [
      {
        "ad": "John Scudder",
        "end": "2022-12-14 17:22:04-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "John Scudder",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-14 17:22:04-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Lars Eggert": [
      {
        "ad": "Lars Eggert",
        "end": "2022-12-12 04:47:42-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Lars Eggert",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-12 04:47:42-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Duke": [
      {
        "ad": "Martin Duke",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Murray Kucherawy": [
      {
        "ad": "Murray Kucherawy",
        "end": "2022-12-03 13:02:01-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Murray Kucherawy",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-03 13:02:01-08:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Paul Wouters": [
      {
        "ad": "Paul Wouters",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Robert Wilton": [
      {
        "ad": "Robert Wilton",
        "end": "2022-12-12 03:05:04-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Robert Wilton",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-12 03:05:04-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Roman Danyliw": [
      {
        "ad": "Roman Danyliw",
        "end": "2022-12-12 18:30:13-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2023-01-04 06:28:14-08:00",
        "end_reason": "position_updated",
        "start": "2022-12-12 18:30:13-08:00",
        "text": "** Section 4.2.1. The example has a few easy to fix issues: --\u00a0 Typo in JSON.\u00a0 Missing comma between array elements in \u201cids\u201d OLD \u00a0 \u00a0 \u00a0 \"ids\" : [ \u00a0 \u00a0 \u00a0 \u00a0 \"Gc0854fb9fb03c41cce3802cb0d220529e6eef94e\" \u00a0 \u00a0 \u00a0 \u00a0 \"not-a-blob\" \u00a0 \u00a0 \u00a0 ], NEW \u00a0 \u00a0 \u00a0 \"ids\" : [ \u00a0 \u00a0 \u00a0 \u00a0 \"Gc0854fb9fb03c41cce3802cb0d220529e6eef94e\", \u00a0 \u00a0 \u00a0 \u00a0 \"not-a-blob\" \u00a0 \u00a0 \u00a0 ], -- The second request (\u201cR2\u201d) sets properties of \u201cdata:asText\u201d and \u201cdata:asBase64\u201d.\u00a0 However, the response only returns a value for \u201cdata:asText\u201d.\u00a0 Shouldn\u2019t it have returned the same data in both formats? ** Section 5 \u00a0  If a server might sometimes return all names empty rather than \u00a0  putting a blobId in the notFound response to a Blob/get, then the \u00a0  server SHOULD always return the same type of response, regardless of \u00a0  whether a blob exists but the user can't access it, or doesn't exist \u00a0  at all.\u00a0 This avoids leaking information about the existence of the \u00a0  blob. Can these behaviors be clarified?\u00a0  -- If this text introducing a new, normative behavior that if a blobId is not found or the user isn\u2019t authorized, a get query response could just be both an empty \u201clist\u201d and \u201cnotFound\u201d?\u00a0 I don\u2019t see that described elsewhere. -- The consistency in behavior for not found and or not authorized makes sense exactly for the reason described.\u00a0 Therefore, why the SHOULD?\u00a0 What would be the circumstances where leaking the existence of the blob is acceptable?",
        "type": "Discuss"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2023-01-04 06:28:14-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Zaheduzzaman Sarker": [
      {
        "ad": "Zaheduzzaman Sarker",
        "end": "2022-12-14 13:26:51-08:00",
        "end_reason": "new_position",
        "start": "2022-12-03 13:02:00-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Zaheduzzaman Sarker",
        "end": "2023-01-17 18:58:53-08:00",
        "end_reason": "evaluation_closed",
        "start": "2022-12-14 13:26:51-08:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc9404",
  "evaluation_end": "2023-01-17 18:58:53-08:00",
  "evaluation_start": "2022-12-03 13:02:00-08:00"
}