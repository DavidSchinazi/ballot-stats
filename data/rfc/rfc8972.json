{
  "all_ballots": {
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2020-07-15 07:50:34-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-15 07:50:34-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2020-07-14 12:45:47-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-14 12:45:47-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2020-07-15 20:27:58-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Barry Leiba",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-15 20:27:58-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Benjamin Kaduk": [
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-07-14 19:29:32-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-09-01 20:55:05-07:00",
        "end_reason": "discuss_updated",
        "start": "2020-07-14 19:29:32-07:00",
        "text": "I support Roman's discusses and am happy to see the ongoing discussion thereof. (1) I think there's a conflict between this document and  RFC 8762  with respect to the behavior of pure  RFC 8762  implementations that receive packets longer than the base packet for the given operational mode. RFC 8762  says (Section 4.3): % The Session-Reflector receives the STAMP-Test packet and verifies it. If % the base STAMP-Test packet is validated, the Session-Reflector that % supports this specification prepares and transmits the reflected test % packet symmetric to the packet received from the Session-Sender copying % the content beyond the size of the base STAMP packet (see Section 4.2). But Section 4 of this document says: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  A Session-Reflector \u00a0  that does not support STAMP extensions is not expected to compare the \u00a0  value in the Length field of the UDP header and the length of the \u00a0  STAMP base packet.\u00a0 Hence the Session-Reflector will transmit the \u00a0  base STAMP packet.\u00a0 [...] Does \"will transmit the base STAMP packet\" mean something other than \"with the exact length of the base packet [for the given operational mode]\"? (2) As I remarked on (then-)  draft-ietf-ippm-stamp , I think we need to require some level of cryptographic protection whenever control information is included in a Session-Sender's test packet.\u00a0 That is, that a Session-Reflector MUST NOT act on control information received in unauthenticated packets, and specifically, that the HMAC TLV must be used, since the base authenticated STAMP packet's HMAC does not cover the options. (3) The secdir reviewer's question about dealing with 6-to-4 gateways seems to have not gotten a response.\u00a0 Specifically, the requirement that \"[t]he Session-Reflector MUST validate the Length value against the address family of the transport encapsulating the STAMP test packet\" seems to require the protocol to fail when sender and reflector use different address families, or perhaps to require the sender to use trial and error to determine which address family is used by the reflector.\u00a0 Some clarification on the intended operation in such scenarios seems appropriate. (4) The ability for a Session-Sender to (MUST-level!) control the DSCP codepoint used by packets generated by a Session-Reflector feels like it opens up significant risk in site-local (security-relevant) policy.\u00a0 That is, the interpretation of the DSCP codepoints is to large extent site-specific, and allowing a nominally external system to set any/all possible values, without a chance for site policy to be applied and block the use of potentially disruptive DSCP values.\u00a0 So I think we need to modify the \"MUST set\", perhaps requiring that either the requested DSCP value is used or the entire TLV/packet/whatever is rejected. (5) If we're not going to remedy the severability of authenticated options from authenticated base packets (which would be my preferred resolution), we need to document that weakness in the security considerations.",
        "type": "Discuss"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-11-15 17:46:44-08:00",
        "end_reason": "position_updated",
        "start": "2020-09-01 20:55:05-07:00",
        "text": "Thanks for all the updates; we've made good progress. I think we're still not converged on the DSCP handling, though.\u00a0 I have a bit more exposition in the COMMENT section, but in short, my understanding is that we're setting up a session-reflector to incur unbounded levels of risk with hard protocol requirements.\u00a0 I think we need to provide a way to bound that risk, for example by allowing the Session-Reflector to selectively choose to treat the CoS TLV as unimplemented (set the U flag in its reflected packet) or some other mechanism for local policy to filter what DSCP codepoints are set in reflected packets (ideally, indicating that the policy made a change). Also, there's a bit of fallout from the flags reworking that's left to cleanup in Section 4: we now have the Session-Sender set the U flag to 1, so this text no longer makes sense: % A STAMP system, i.e., either a Session-Sender or a Session-Reflector, % that has received a STAMP test packet with extension TLVs MUST % validate each TLV: % %\u00a0 \u00a0 If the U flag is set, the STAMP system MUST skip the processing of %\u00a0 \u00a0 the TLV. I think it should just apply to the Session-Sender for this case -- the Session-Reflector doesn't need to check the received U flag, since the Session-Sender will not be generating TLVs it does not understand. (Whether or not to keep the behavior for the M and I flags as applying to both Session-Sender and Session-Reflector vs. just Session-Sender does not immediately seem to be of much consequence.",
        "type": "Discuss"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-11-15 17:46:44-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2020-07-15 11:37:05-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-15 11:37:05-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Eric Vyncke": [
      {
        "ad": "Eric Vyncke",
        "end": "2020-07-13 03:23:38-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Eric Vyncke",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-13 03:23:38-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Erik Kline": [
      {
        "ad": "Erik Kline",
        "end": "2020-07-13 23:25:17-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Erik Kline",
        "end": "2020-08-13 17:13:24-07:00",
        "end_reason": "position_updated",
        "start": "2020-07-13 23:25:17-07:00",
        "text": "[ general ] * Please clarify whether the Length is in network byte order or not for all \u00a0 multibyte fields.\u00a0 A single statement, perhaps around 2.0 or something, \u00a0 declaring the convention would suffice (assuming all multibyte integers \u00a0 share the same encoding). * Should there be an IANA registry for the access ID field as well? [ sections 4.2,4.3 ] * I think the L-bit error case guidance may not conform to the guidance \u00a0 in section 4(.0)?\u00a0 Specifically, 4(.0) says if the Length field is funky \u00a0 the copy the rest of the packet into the reponse and set L=1 (yes?). \u00a0 Whereas, 4.2,3 says it MUST zero out the fields (rather than just copy \u00a0 the remainder of the packet).\u00a0 I may have misunderstood something, \u00a0 though.",
        "type": "Discuss"
      },
      {
        "ad": "Erik Kline",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-08-13 17:13:24-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Magnus Westerlund": [
      {
        "ad": "Magnus Westerlund",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Martin Duke": [
      {
        "ad": "Martin Duke",
        "end": "2020-07-09 08:45:50-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Duke",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Martin Vigoureux": [
      {
        "ad": "Martin Vigoureux",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Murray Kucherawy": [
      {
        "ad": "Murray Kucherawy",
        "end": "2020-07-13 00:54:01-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Murray Kucherawy",
        "end": "2020-07-13 10:08:19-07:00",
        "end_reason": "position_updated",
        "start": "2020-07-13 00:54:01-07:00",
        "text": null,
        "type": "No Objection"
      },
      {
        "ad": "Murray Kucherawy",
        "end": "2020-08-05 07:09:02-07:00",
        "end_reason": "position_updated",
        "start": "2020-07-13 10:08:19-07:00",
        "text": "Section 4 says: \"Detected error events MUST be logged.\u00a0 Note that rate of logging MUST be controlled.\" This seems to be incomplete.\u00a0 Why is it a MUST?\u00a0 It doesn't seem to have anything to do with interoperability; if I don't log, nothing breaks.\u00a0 If it's MUST for security reasons, other questions arise: Logged where?\u00a0 What data specifically needs to be logged?\u00a0 How long should they be retained?\u00a0 Do any privacy concerns arise?\u00a0 Do the logs need to be protected at rest? etc.",
        "type": "Discuss"
      },
      {
        "ad": "Murray Kucherawy",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-08-05 07:09:02-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Robert Wilton": [
      {
        "ad": "Robert Wilton",
        "end": "2020-07-16 02:42:15-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Robert Wilton",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-16 02:42:15-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Roman Danyliw": [
      {
        "ad": "Roman Danyliw",
        "end": "2020-07-13 10:12:37-07:00",
        "end_reason": "new_position",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2020-08-21 13:50:33-07:00",
        "end_reason": "position_updated",
        "start": "2020-07-13 10:12:37-07:00",
        "text": "** Section 4.2.\u00a0 The Location TLV is explicitly trying to extract network configuration information that would be elided by the first hop router (MAC) or a NAT (real IP address).\u00a0  RFC8762  helpfully notes that \u201cWhen using STAMP over the Internet \u2026 impact of the STAMP-Test packets MUST be thoroughly analyzed.\u201d\u00a0 Please provide a bit of text describing the privacy implications here (or bound this with an applicability statement). ** Section 4.8.\u00a0 Is the key used for the HMAC TLV the same as the one in the HMAC in the STAMP authenticated packet?\u00a0 Could one use different keys?",
        "type": "Discuss"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-08-21 13:50:33-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2020-11-15 20:25:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-07-09 08:45:50-07:00",
        "text": null,
        "type": "No Record"
      }
    ]
  },
  "doc_name": "rfc8972",
  "evaluation_end": "2020-11-15 20:25:12-08:00",
  "evaluation_start": "2020-07-09 08:45:50-07:00"
}