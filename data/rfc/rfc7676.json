{
  "all_ballots": {
    "Alia Atlas": [
      {
        "ad": "Alia Atlas",
        "end": "2015-08-05 12:58:00-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alia Atlas",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-05 12:58:00-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2015-08-03 14:12:02-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-03 14:12:02-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2015-08-02 16:41:15-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-02 16:41:15-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2015-07-29 03:30:09-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Barry Leiba",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-07-29 03:30:09-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ben Campbell": [
      {
        "ad": "Ben Campbell",
        "end": "2015-08-05 11:49:33-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ben Campbell",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-05 11:49:33-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Benoit Claise": [
      {
        "ad": "Benoit Claise",
        "end": "2015-08-05 16:11:14-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benoit Claise",
        "end": "2015-08-31 02:52:54-07:00",
        "end_reason": "position_updated",
        "start": "2015-08-05 16:11:14-07:00",
        "text": "I'm confused by \"It updates the GRE specification,  RFC 2784 .\" and \"This document specifies GRE procedures for IPv6, used as either the payload or delivery protocol.\" Let me take this sentence (in the GRE Header Fields) \u00a0  The GRE ingress node SHOULD set the Checksum Present field in the GRE \u00a0  header to zero.  I don't know if it's valid for both IPv4 and IPv6. Based on the \"update\" flag, I would say it's valid for both, as it updates  RFC 2784 . Based on the abstract, I would say it's only for IPv6 If the latter, it should clearly say so. Alternatively, the \"update\" can be removed, to treat this RFC as an extension, specific to IPv6. However, we would lose the forward ref from  RFC 2784",
        "type": "Discuss"
      },
      {
        "ad": "Benoit Claise",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-31 02:52:54-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Brian Haberman": [
      {
        "ad": "Brian Haberman",
        "end": "2015-07-19 23:22:48-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Brian Haberman",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2015-08-05 10:12:24-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-05 10:12:24-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Jari Arkko": [
      {
        "ad": "Jari Arkko",
        "end": "2015-08-06 02:32:50-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Jari Arkko",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-06 02:32:50-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Joel Jaeggli": [
      {
        "ad": "Joel Jaeggli",
        "end": "2015-08-05 21:39:58-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Joel Jaeggli",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-05 21:39:58-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Kathleen Moriarty": [
      {
        "ad": "Kathleen Moriarty",
        "end": "2015-08-04 13:35:38-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Kathleen Moriarty",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-04 13:35:38-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Stiemerling": [
      {
        "ad": "Martin Stiemerling",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2015-08-04 05:57:42-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2015-08-06 06:40:07-07:00",
        "end_reason": "position_updated",
        "start": "2015-08-04 05:57:42-07:00",
        "text": null,
        "type": "No Objection"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2015-08-20 14:32:40-07:00",
        "end_reason": "discuss_updated",
        "start": "2015-08-06 06:40:07-07:00",
        "text": "I'm balloting this question as Discuss because we haven't had a chance to close on it in e-mail yet. To be clear, I'm sure we'll be able to do that fairly quickly. In this text, in section 2.1, \u00a0  However, if the GRE Checksum Present field is set to zero, the GRE \u00a0  header is not protected by any checksum.\u00a0 Furthermore, depending on \u00a0  which of the above-mentioned conditions are true, selected portions \u00a0  of the GRE payload will not be protected by any checksum. \u00a0  Network operators should evaluate risk factors in their networks and \u00a0  configure GRE ingress nodes appropriately. \u00a0   What I'm trying to understand (\"Discuss\"), is what the risk factors actually look like for GRE over IPv6 in this draft. The working assumption is that packets with corrupted addresses can be mis-delivered anywhere, and when you don't have a checksum that allows you to figure out that the packet has been corrupted, the accidental endpoint is going to try to deliver it to some unsuspecting application. In GRE over UDP, we ended up with some conservative recommendations, because a corrupted UDP packet with no checksum could be misdelivered anywhere on the Internet. I suspect that's also true for GRE directly over IPv6, but want to understand better before the document is approved. The recommendations in  https://tools.ietf.org/html/draft-ietf-tsvwg-gre-in-udp-encap-07#section-5.2  are (provided for your convenience): \u00a0  When UDP is used over IPv6, the UDP checksum is relied upon to \u00a0  protect both the IPv6 and UDP headers from corruption, and so MUST \u00a0  used with the following exceptions: \u00a0 \u00a0  a. Use of GRE-in-UDP in networks under single administrative \u00a0 \u00a0 \u00a0 \u00a0 control (such as within a single operator's network) where it \u00a0 \u00a0 \u00a0 \u00a0 is known (perhaps through knowledge of equipment types and \u00a0 \u00a0 \u00a0 \u00a0 lower layer checks) that packet corruption is exceptionally \u00a0 \u00a0 \u00a0 \u00a0 unlikely and where the operator is willing to take the risk of \u00a0 \u00a0 \u00a0 \u00a0 undetected packet corruption. \u00a0 \u00a0  b. Use of GRE-in-UDP in networks under single administrative \u00a0 \u00a0 \u00a0 \u00a0 control (such as within a single operator's network) where it \u00a0 \u00a0 \u00a0 \u00a0 is judged through observational measurements (perhaps of \u00a0 \u00a0 \u00a0 \u00a0 historic or current traffic flows that use a non-zero checksum) \u00a0 \u00a0 \u00a0 \u00a0 that the level of packet corruption is tolerably low and where \u00a0 \u00a0 \u00a0 \u00a0 the operator is willing to take the risk of undetected packet \u00a0 \u00a0 \u00a0 \u00a0 corruption. \u00a0 \u00a0  c. Use of GRE-in-UDP for traffic delivery for applications that \u00a0 \u00a0 \u00a0 \u00a0 are tolerant of mis-delivered or corrupted packets (perhaps \u00a0 \u00a0 \u00a0 \u00a0 through higher layer checksum, validation, and retransmission \u00a0 \u00a0 \u00a0 \u00a0 or transmission redundancy) where the operator is willing to \u00a0 \u00a0 \u00a0 \u00a0 rely on the applications using the tunnel to survive any \u00a0 \u00a0 \u00a0 \u00a0 corrupt packets. \u00a0  For these exceptions, the UDP zero-checksum mode can be used. \u00a0   A similar set of recommendations are included in  https://tools.ietf.org/html/rfc7510#section-3.2 , for MPLS over UDP.",
        "type": "Discuss"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2015-09-02 11:42:10-07:00",
        "end_reason": "position_updated",
        "start": "2015-08-20 14:32:40-07:00",
        "text": "Thank you for working with me on this Discuss, and addressing my Comments. I've revised this Discuss based on conversations with Ron (and we're converging). I have three questions, but I'm ready to clear. For reference, the Checksum text in -13 now looks like this: 4.2.\u00a0 Checksum Considerations \u00a0  As stated in [ RFC2784 ], the GRE header can contain a checksum.\u00a0 If \u00a0  present, the GRE header checksum can be used to detect corruption of \u00a0  the GRE header and GRE payload. \u00a0  The GRE header checksum cannot be used to detect corruption of the \u00a0  IPv6 delivery header.\u00a0 Furthermore, the IPv6 delivery header does not \u00a0  contain a checksum of its own.\u00a0 Therefore, no available checksum can \u00a0  be used to detect corruption of the IPv6 delivery header. \u00a0  In one failure scenario, the destination address in the IPv6 delivery \u00a0  header is corrupted.\u00a0 As a result, the IPv6 delivery packet is \u00a0  delivered to a node other than the intended GRE egress node. \u00a0  Depending upon the state and configuration of that node, it will \u00a0  either: \u00a0  a.\u00a0 Drop the packet \u00a0  b.\u00a0 De-encapsulate the payload and forward it to its intended \u00a0 \u00a0 \u00a0  destination \u00a0  c.\u00a0 De-encapsulate the payload and forward it to a node other than \u00a0 \u00a0 \u00a0  its intended destination.\u00a0 For example, the payload might be \u00a0 \u00a0 \u00a0  intended for a node on one VPN, but delivered to an identically \u00a0 \u00a0 \u00a0  numbered node in another VPN. \u00a0  Behaviors a) and b) are acceptable.\u00a0 Behavior c) is not acceptable. \u00a0  However, behavior c) is possible only when the payload destination \u00a0  address is not globally unique and the GRE egress node provides \u00a0  disambiguating context to that address. \u00a0  Before deploying GRE over IPv6, network operators should consider the \u00a0  likelihood of behavior c) in their network.\u00a0 GRE over IPv6 MUST NOT \u00a0  be deployed other than where the network operator deems the risk \u00a0  associated with behavior c) to be acceptable. \u00a0  The risk associated with behavior c) could be mitigated with end-to- \u00a0  end authentication of the payload. \u00a0   So, my questions are: (1) how likely is it that endpoints in different VPNs would have overlapping address ranges? (2) is it correct that if endpoint A gets traffic that was intended for an identically addressed endpoint B in another VPN using an overlapping address range, and that traffic is authenticated, endpoint A can say \"this isn't for me\", but if that traffic is not encrypted, is traffic intended for endpoint B leaking to endpoint A? (3) if I'm not completely in the weeds so far, is \"end-to-end authentication\" something an operator can do? If the answer to (2) is \"yes\", is \"end-to-end encryption\" something an operator can do?",
        "type": "Discuss"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-09-02 11:42:10-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Stephen Farrell": [
      {
        "ad": "Stephen Farrell",
        "end": "2015-08-05 06:52:28-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Stephen Farrell",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-05 06:52:28-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Terry Manderson": [
      {
        "ad": "Terry Manderson",
        "end": "2015-08-05 17:59:33-07:00",
        "end_reason": "new_position",
        "start": "2015-07-19 23:22:48-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Terry Manderson",
        "end": "2015-09-02 13:31:07-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-08-05 17:59:33-07:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc7676",
  "evaluation_end": "2015-09-02 13:31:07-07:00",
  "evaluation_start": "2015-07-19 23:22:48-07:00"
}