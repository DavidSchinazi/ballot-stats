{
  "all_ballots": {
    "Adrian Farrel": [
      {
        "ad": "Adrian Farrel",
        "end": "2015-01-09 09:07:12-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Adrian Farrel",
        "end": "2015-03-27 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2015-01-09 09:07:12-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alia Atlas": [
      {
        "ad": "Alia Atlas",
        "end": "2015-01-21 20:05:05-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alia Atlas",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-21 20:05:05-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2015-01-21 15:19:44-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2015-04-20 12:48:01-07:00",
        "end_reason": "position_updated",
        "start": "2015-01-21 15:19:44-08:00",
        "text": "= Section 5 = I think the point that Pete makes about sub-bullet 3 is valid, and that it's possible for an implementer to do the wrong thing because of the confused way in which sub-bullet 3 is written. I think this can be resolved by adopting the changes that Pete suggests. If you choose to not adopt all of Pete's changes in Section 5 and retain the normative recommendations about logging, I'd like to discuss what the difference is between a security fault and a security alert. It's hard for me to see how the spec can normatively recommend implementation-specific behavior and then use two different terms for what that behavior is supposed to entail without explaining the difference between them. (And even if you remove the normative logging recommendations, it would still help to explain what the difference is, but that would no longer be DISCUSS-worthy I think.)",
        "type": "Discuss"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-04-20 12:48:01-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2015-05-11 13:43:33-07:00",
        "end_reason": "new_position",
        "start": "2015-03-22 00:00:00+00:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-05-11 13:43:33-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2015-01-05 22:21:47-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Barry Leiba",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-05 22:21:47-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ben Campbell": [
      {
        "ad": "Ben Campbell",
        "end": "2015-05-13 15:38:50-07:00",
        "end_reason": "new_position",
        "start": "2015-03-22 00:00:00+00:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ben Campbell",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-05-13 15:38:50-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Benoit Claise": [
      {
        "ad": "Benoit Claise",
        "end": "2015-01-20 14:05:29-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benoit Claise",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-20 14:05:29-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Brian Haberman": [
      {
        "ad": "Brian Haberman",
        "end": "2015-01-21 07:45:05-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Brian Haberman",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-21 07:45:05-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2015-05-13 02:21:39-07:00",
        "end_reason": "new_position",
        "start": "2015-03-22 00:00:00+00:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-05-13 02:21:39-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Jari Arkko": [
      {
        "ad": "Jari Arkko",
        "end": "2015-01-22 05:01:34-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Jari Arkko",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-22 05:01:34-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Joel Jaeggli": [
      {
        "ad": "Joel Jaeggli",
        "end": "2014-12-31 07:22:31-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Joel Jaeggli",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Kathleen Moriarty": [
      {
        "ad": "Kathleen Moriarty",
        "end": "2015-01-21 14:48:47-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Kathleen Moriarty",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-21 14:48:47-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Stiemerling": [
      {
        "ad": "Martin Stiemerling",
        "end": "2015-01-21 09:26:48-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Stiemerling",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-21 09:26:48-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Pete Resnick": [
      {
        "ad": "Pete Resnick",
        "end": "2015-01-20 15:08:31-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Pete Resnick",
        "end": "2015-03-27 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2015-01-20 15:08:31-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Richard Barnes": [
      {
        "ad": "Richard Barnes",
        "end": "2015-01-21 20:09:14-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Richard Barnes",
        "end": "2015-03-27 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2015-01-21 20:09:14-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2015-01-19 15:31:32-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-19 15:31:32-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Stephen Farrell": [
      {
        "ad": "Stephen Farrell",
        "end": "2015-01-22 06:15:34-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Stephen Farrell",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-01-22 06:15:34-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ted Lemon": [
      {
        "ad": "Ted Lemon",
        "end": "2015-01-22 07:01:48-08:00",
        "end_reason": "new_position",
        "start": "2014-12-31 07:22:31-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ted Lemon",
        "end": "2015-02-07 11:46:08-08:00",
        "end_reason": "discuss_updated",
        "start": "2015-01-22 07:01:48-08:00",
        "text": "This text makes sense, but I think it needs to be changed somewhat: \u00a0  3.\u00a0 When parsing the IPv6 header chain, if the packet is identified \u00a0 \u00a0 \u00a0  to be a DHCPv6 packet meant for a DHCPv6 client or the packet \u00a0 \u00a0 \u00a0  contains an unrecognized Next Header value, DHCPv6-Shield MUST \u00a0 \u00a0 \u00a0  drop the packet, and SHOULD log the packet drop event in an \u00a0 \u00a0 \u00a0  implementation-specific manner as a security alert. \u00a0 \u00a0 \u00a0  DHCPv6-Shield MUST provide a configuration knob that controls \u00a0 \u00a0 \u00a0  whether packets with unrecognized Next Header values are dropped; \u00a0 \u00a0 \u00a0  this configuration knob MUST default to \"drop\". \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RATIONALE: An unrecognized Next Header value could possibly \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 identify an IPv6 Extension Header, and thus be leveraged to \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 conceal a DHCPv6-server packet (since there is no way for \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DHCPv6-Shield to parse past unrecognized Next Header values \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [ I-D.gont-6man-rfc6564bis ]).\u00a0 [ RFC7045 ] requires that nodes be \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 configurable with respect to whether packets with unrecognized \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 headers are forwarded, and allows the default behavior to be \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 that such packets be dropped. I think it's worth considering whether the default setting for this configuration knob should be \"drop\" or \"pass.\"\u00a0  The problem with defaulting to \"drop\" is that it means that extension headers the DHCPv6 Shield device does not understand fail to pass, which could cause operational problems.\u00a0  The problem with not defaulting to \"drop\" you have already explained.\u00a0  I do not think that the threat of DHCPv6 spoofing is sufficient to justify defaulting to drop.\u00a0  Yes, DHCPv6 spoofing can cause operational issues.\u00a0  So can filtering \"unknown\" headers. The frustrating thing about this document is that it actually solves the problem the wrong way.\u00a0  What this document should recommend is filtering of DHCPv6 packets from _clients_.\u00a0  If a rogue DHCP server can't see client multicasts because DHCPv6 shield is blocking them, then it can't know to attack DHCPv6 clients.\u00a0  This substantially limits the rogue's ability to attack DHCPv6 clients on the local subnet.\u00a0  If you combine that with server packet filtering but do not block unknown headers, I think you have achieved a good tradeoff between the problems caused by whatever spoofing might get to a client using an unknown header and the problems caused by blocking non-DHCP packets that use that unknown header for some legitimate purpose. So, realizing that this would be a major change, the way I would LIKE you to address this discuss is to add DHCPv6 client packet filtering.\u00a0  You could also address it by changing the default for the unknown header filter, but I would understand if you felt that this was inadequate.\u00a0  Or you could argue persuasively that I'm wrong, which has been known to happen. :)",
        "type": "Discuss"
      },
      {
        "ad": "Ted Lemon",
        "end": "2015-03-27 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2015-02-07 11:46:08-08:00",
        "text": "When I began with this DISCUSS, my understanding was that in order to implement DHCPv6 Shield and be sure of stopping all DHCP packets, it would, as the document says, be necessary to filter packets with unknown IPv6 headers.\u00a0  This would likely mean that the layer 2 switching fabric of a network supporting DHCPv6 shield would be unable to carry any IP packets containing not only unknown IP extension headers, but also packets containing unknown (to the switching fabric) protocol headers.\u00a0  Consequently I suggested a fairly elaborate way to mitigate the risk without requiring that all such packets be filtered. However, after discussing this at length with Fernando, I realized that it was actually not at all necessary to filter unknown IPv6 headers.\u00a0  The reason for this is that we can safely assume that any IP extension header that appears in a packet conforms to  RFC 6564 .\u00a0  This means that switches implementing DHCPv6 shield can at least in principle skip over unknown IP extension headers.\u00a0  If an unknown protocol header is seen, this will look to the switch like a malformed IP extension header, but this is harmless in the context of DHCPv6 shield because any such packet is by definition _not_ a DHCPv6 packet.\u00a0  I believe that a switching fabric should not default to dropping packets it doesn't recognize, because this pretty much guarantees that new protocols can't be deployed even in site-specific situations. Therefore, I believe that this document should not only not require filtering unknown IP extension headers, but should not even mention filtering them.\u00a0  It may be that some implementations may need to filter them for other reasons, but this is already allowed by  RFC 7045 , and therefore needn't be mentioned here.",
        "type": "Discuss"
      }
    ],
    "Terry Manderson": [
      {
        "ad": "Terry Manderson",
        "end": "2015-05-13 17:01:20-07:00",
        "end_reason": "new_position",
        "start": "2015-03-22 00:00:00+00:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Terry Manderson",
        "end": "2015-07-06 15:57:38-07:00",
        "end_reason": "evaluation_closed",
        "start": "2015-05-13 17:01:20-07:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc7610",
  "evaluation_end": "2015-07-06 15:57:38-07:00",
  "evaluation_start": "2014-12-31 07:22:31-08:00"
}