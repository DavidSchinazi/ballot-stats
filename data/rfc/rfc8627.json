{
  "all_ballots": {
    "Adam Roach": [
      {
        "ad": "Adam Roach",
        "end": "2019-02-20 22:14:31-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Adam Roach",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 22:14:31-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alexey Melnikov": [
      {
        "ad": "Alexey Melnikov",
        "end": "2019-02-19 02:26:11-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alexey Melnikov",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-19 02:26:11-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2019-02-20 10:53:57-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 10:53:57-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ben Campbell": [
      {
        "ad": "Ben Campbell",
        "end": "2019-02-07 09:05:30-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ben Campbell",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-07 09:05:30-08:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Benjamin Kaduk": [
      {
        "ad": "Benjamin Kaduk",
        "end": "2019-02-18 13:53:24-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2019-03-08 14:41:28-08:00",
        "end_reason": "position_updated",
        "start": "2019-02-18 13:53:24-08:00",
        "text": "I'm confused about some parts of how I'd implement this. It's quite possible this is just my error, but I'm including this point in the Discuss section in case it's not.\u00a0 This basically relates to how multiple recovery packets from a given FEC block get encoded and identified on the wire, but also how to populate the source block when multiple SSRCs are included. In short: suppose that I have D=3 and L=2.\u00a0 I should expect 5 repair packets for the six source packets in a block; the scheme for determining what order to generate them in and what their contents are is fairly clear to me.\u00a0 But how do I identify them on the wire?\u00a0 I'm assuming that the D and L on the wire are fixed values, since there's the possibility to only send zero on the wire and negotiate their values out of band.\u00a0 It's a little less clear whether the \"SN base\" fields are expected to be the same for all 5 recovery packets based on a given block, but if they do change then I'm not sure how I tell whether a given recovery packet is for a row or a column.\u00a0 Is this supposed to be using the sequence number from the outer RTP header for packet ordering, and the implicit order for row/column FEC packets?\u00a0 (It seems that in case of very bad packet loss and dynamic L+D, the receiver could then get out of sync as to what the sequence number is that corresponds to the start of a new batch of recovery blocks.) I also don't see how, for the case when there are multiple SSRCs, I know how many source packets to include from each SSRC in order to make up the D x L source block -- since Section 6.2's discussion lumps all the \"source packets\" together into a single set that get mutually xor'd, that seems to imply that the encoding is not \"do recovery for SSRC1, do recovery for SSRC2, ..., concatenate them all\". There are perhaps some other scenarios to worry about, such as interleaved recovery within a single block, but I'm happy to focus on the single 2-D case for purposes of illustration. Any insight into what I'm missing would be appreciated. A couple other points to check on: I'm not sure I'm following the procedures in Section 6.3.2 properly (see COMMENT) -- is the text correct as written? I also think there are a couple more factors worth mentioning in the security considerations (see COMMENT).",
        "type": "Discuss"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-03-08 14:41:28-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2019-02-20 15:46:55-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 15:46:55-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Eric Rescorla": [
      {
        "ad": "Eric Rescorla",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Ignas Bagdonas": [
      {
        "ad": "Ignas Bagdonas",
        "end": "2019-02-20 21:31:15-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ignas Bagdonas",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 21:31:15-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Vigoureux": [
      {
        "ad": "Martin Vigoureux",
        "end": "2019-02-20 22:23:50-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Vigoureux",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 22:23:50-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Mirja Kuhlewind": [
      {
        "ad": "Mirja Kuhlewind",
        "end": "2019-02-21 03:32:26-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Mirja Kuhlewind",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-21 03:32:26-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2019-02-19 17:46:40-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-19 17:46:40-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Suresh Krishnan": [
      {
        "ad": "Suresh Krishnan",
        "end": "2019-02-19 19:43:26-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Suresh Krishnan",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-19 19:43:26-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Terry Manderson": [
      {
        "ad": "Terry Manderson",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2019-02-20 09:21:21-08:00",
        "end_reason": "new_position",
        "start": "2019-02-07 09:05:29-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Warren Kumari",
        "end": "2019-03-21 01:41:36-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 09:21:21-08:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc8627",
  "evaluation_end": "2019-03-21 01:41:36-07:00",
  "evaluation_start": "2019-02-07 09:05:29-08:00"
}