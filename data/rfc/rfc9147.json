{
  "all_ballots": {
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2021-03-12 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2021-03-23 14:49:00-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-23 14:49:00-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2021-03-12 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Benjamin Kaduk": [
      {
        "ad": "Benjamin Kaduk",
        "end": "2021-02-27 16:41:11-08:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-02-27 16:41:11-08:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2021-03-12 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Eric Vyncke": [
      {
        "ad": "Eric Vyncke",
        "end": "2021-03-25 06:59:38-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Eric Vyncke",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-25 06:59:38-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Erik Kline": [
      {
        "ad": "Erik Kline",
        "end": "2021-03-23 12:03:39-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Erik Kline",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-23 12:03:39-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Francesca Palombini": [
      {
        "ad": "Francesca Palombini",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-24 10:02:43-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "John Scudder": [
      {
        "ad": "John Scudder",
        "end": "2021-03-25 06:11:23-07:00",
        "end_reason": "position_updated",
        "start": "2021-03-24 19:18:30-07:00",
        "text": "Section 4.5.2: \u00a0  Implementations which choose to generate an alert instead, MUST \u00a0  generate error alerts to avoid attacks where the attacker repeatedly \u00a0  probes the implementation to see how it responds to various types of \u00a0  error.\u00a0 Note that if DTLS is run over UDP, then any implementation I just don\u2019t understand this, despite having hopped over to  RFC 8446  Sections 6 and 6.2. Is the intention that \u201cerror alert\u201d implies closure of the association? That doesn\u2019t seem to be exactly what 8446 says \u2014 it says the receiver of the alert closes the connection, but it doesn\u2019t mandate this for the sender (except in the case of \u201cfatal alert\u201d messages, where \u201cfatal\u201d seems like the exception that proves the rule).  It may be that \u201ceveryone knows\u201d an error alert is the same as termination, but it\u2019s not obvious in the plain English of the text I reviewed. Or maybe I\u2019m barking up the wrong tree and this isn't what the text quoted above is even driving at.",
        "type": "Discuss"
      },
      {
        "ad": "John Scudder",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-25 06:11:23-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Lars Eggert": [
      {
        "ad": "Lars Eggert",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-25 06:08:28-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Magnus Westerlund": [
      {
        "ad": "Magnus Westerlund",
        "end": "2021-03-12 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Martin Duke": [
      {
        "ad": "Martin Duke",
        "end": "2021-03-24 10:48:44-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Duke",
        "end": "2021-03-24 14:41:54-07:00",
        "end_reason": "position_updated",
        "start": "2021-03-24 10:48:44-07:00",
        "text": null,
        "type": "No Objection"
      },
      {
        "ad": "Martin Duke",
        "end": "2021-04-08 13:21:11-07:00",
        "end_reason": "position_updated",
        "start": "2021-03-24 14:41:54-07:00",
        "text": "In Sec 5.8.2, it is a significant change from DTLS 1.2 that the initial timeout is dropping from 1 sec to 100ms, and this is worthy of some discussion. This violation of  RFC8961  ought to be explored further. For a client first flight of one packet, it seems unobjectionable. However, I'm less comfortable with a potentially large server first flight, or a client second flight, likely leading to a large spurious retransmission. With large flights, not only is a short timeout more dangerous, but you are more likely to get an ACK in the event of some loss that allows you to shortcut the timer anyway (i.e. the cost of long timeout is smaller) Relatedly, in section 5.8.3 there is no specific recommendation for a maximum flight size at all. I would think that applications SHOULD have no more than 10 datagrams outstanding unless it has some OOB evidence of available bandwidth on the channel, in keeping with de facto transport best practice. Finally, I am somewhat concerned that the lack of any window reduction might perform poorly in constrained environments. Granted, doubling the timeout will reduce the rate, but when retransmission is ack-driven there is essentially no reduction of sending rate in response to loss. I want to emphasize that I am not looking to fully recreate TCP here; some bounds on this behavior would likely be satisfactory. Here is an example of something that I think would be workable. It is meant to be a starting point for discussion. I've asked for some input from the experts in this area who may feel differently. - In general, the initial timeout is 100ms. - The timeout backoff is not reset after successful delivery. This allows the \"discovery\" in bullet 1 to be safely applied to larger flights. - For a first flight of > 2 packets, the sender MUST either (a) set the initial timeout to 1 second OR (b) retransmit no more than 2 packets after timeout. - flights SHOULD be limited to 10 packets - on timeout or ack-indicated retransmission, no more than half (minimum one) of the flight should be retransmitted The theory here is that it's responsive to RTTs > 100ms, but small flights can be more aggressive, and large flows are likely to have ack-driven retransmission.",
        "type": "Discuss"
      },
      {
        "ad": "Martin Duke",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-04-08 13:21:11-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Vigoureux": [
      {
        "ad": "Martin Vigoureux",
        "end": "2021-03-25 04:07:51-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Vigoureux",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-25 04:07:51-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Murray Kucherawy": [
      {
        "ad": "Murray Kucherawy",
        "end": "2021-03-25 00:29:54-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Murray Kucherawy",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-25 00:29:54-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Robert Wilton": [
      {
        "ad": "Robert Wilton",
        "end": "2021-03-23 09:00:36-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Robert Wilton",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-23 09:00:36-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Roman Danyliw": [
      {
        "ad": "Roman Danyliw",
        "end": "2021-03-23 18:59:10-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-23 18:59:10-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2021-03-24 13:44:07-07:00",
        "end_reason": "new_position",
        "start": "2021-02-27 16:41:10-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Warren Kumari",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-24 13:44:07-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Zaheduzzaman Sarker": [
      {
        "ad": "Zaheduzzaman Sarker",
        "end": "2021-05-03 09:17:43-07:00",
        "end_reason": "evaluation_closed",
        "start": "2021-03-23 10:56:17-07:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc9147",
  "evaluation_end": "2021-05-03 09:17:43-07:00",
  "evaluation_start": "2021-02-27 16:41:10-08:00"
}