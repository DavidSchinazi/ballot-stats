{
  "all_ballots": {
    "Adrian Farrel": [
      {
        "ad": "Adrian Farrel",
        "end": "2014-08-18 12:23:43-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Adrian Farrel",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-18 12:23:43-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alia Atlas": [
      {
        "ad": "Alia Atlas",
        "end": "2014-08-18 14:10:05-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alia Atlas",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-18 14:10:05-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2014-08-18 10:41:43-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-18 10:41:43-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2014-08-08 11:19:05-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Barry Leiba",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Benoit Claise": [
      {
        "ad": "Benoit Claise",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Brian Haberman": [
      {
        "ad": "Brian Haberman",
        "end": "2014-08-18 06:00:03-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Brian Haberman",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-18 06:00:03-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Jari Arkko": [
      {
        "ad": "Jari Arkko",
        "end": "2014-08-20 00:21:52-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Jari Arkko",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-20 00:21:52-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Joel Jaeggli": [
      {
        "ad": "Joel Jaeggli",
        "end": "2014-08-20 13:08:12-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Joel Jaeggli",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-20 13:08:12-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Kathleen Moriarty": [
      {
        "ad": "Kathleen Moriarty",
        "end": "2014-08-18 13:58:08-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Kathleen Moriarty",
        "end": "2014-08-21 07:21:18-07:00",
        "end_reason": "position_updated",
        "start": "2014-08-18 13:58:08-07:00",
        "text": "The draft looks very good and the security considerations in  RFC5789  cover most of the bases I would be concerned with.\u00a0 I do have a question I'd like to discuss to see if it applies or not. Normally, in other spaces patches are validated and that might be as simple as making sure the hash of the patch provided by the source matches the value you calculated (not corrupted, *should* be from the source you think it's from).\u00a0 I don't see any mention of this practice, is there a reason for that or should it be added?\u00a0 Maybe it's not possible because of how the patch is delivered over HTTP, but I figured it was worth flagging to discuss quickly.",
        "type": "Discuss"
      },
      {
        "ad": "Kathleen Moriarty",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-21 07:21:18-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Stiemerling": [
      {
        "ad": "Martin Stiemerling",
        "end": "2014-08-15 06:06:11-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Stiemerling",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-15 06:06:11-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Pete Resnick": [
      {
        "ad": "Pete Resnick",
        "end": "2014-08-20 10:18:55-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Pete Resnick",
        "end": "2014-08-21 07:33:18-07:00",
        "end_reason": "position_updated",
        "start": "2014-08-20 10:18:55-07:00",
        "text": "I am certainly willing to be talked out of this, but I am concerned about the implementability and would like to DISCUSS it a bit. In section 2: \u00a0  To apply the merge patch document to a target resource, the system \u00a0  realizes the effect of the following function, described in \u00a0  pseudocode.\u00a0 For this description, the function is called MergePatch, \u00a0  and it takes two arguments: the target resource document and the \u00a0  merge patch document.\u00a0 The Target argument can be any JSON value, or \u00a0  undefined.\u00a0 The Patch argument can be any JSON value. It took me repeated reading of the pseudocode (and may I mention that I *hate* languages which rely on indentation ;-) ) to figure out that: - If the Patch if not an object, the result *is* the Patch - The Patch can't act on the internals of an array; it can only replace the whole thing - The Patch cannot replace objects with new objects. Can't we *please* have a textual description of this protocol in addition to a (recursive!) pseudocode function? I am not convinced that an implementer will get their implementation right just from the pseudocode.",
        "type": "Discuss"
      },
      {
        "ad": "Pete Resnick",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-21 07:33:18-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Richard Barnes": [
      {
        "ad": "Richard Barnes",
        "end": "2014-08-20 13:24:18-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Richard Barnes",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-20 13:24:18-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2014-08-18 07:30:07-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-18 07:30:07-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Stephen Farrell": [
      {
        "ad": "Stephen Farrell",
        "end": "2014-08-20 15:39:58-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Stephen Farrell",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-20 15:39:58-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ted Lemon": [
      {
        "ad": "Ted Lemon",
        "end": "2014-08-21 07:14:42-07:00",
        "end_reason": "new_position",
        "start": "2014-08-08 11:19:05-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ted Lemon",
        "end": "2014-08-25 08:02:23-07:00",
        "end_reason": "evaluation_closed",
        "start": "2014-08-21 07:14:42-07:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc7386",
  "evaluation_end": "2014-08-25 08:02:23-07:00",
  "evaluation_start": "2014-08-08 11:19:05-07:00"
}