{
  "all_ballots": {
    "Adrian Farrel": [
      {
        "ad": "Adrian Farrel",
        "end": "2014-09-28 12:11:48-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Adrian Farrel",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-09-28 12:11:48-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alia Atlas": [
      {
        "ad": "Alia Atlas",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2014-09-28 19:24:01-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-09-28 19:24:01-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2014-10-01 08:00:47-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Barry Leiba",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-01 08:00:47-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Benoit Claise": [
      {
        "ad": "Benoit Claise",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Brian Haberman": [
      {
        "ad": "Brian Haberman",
        "end": "2014-09-29 16:59:42-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Brian Haberman",
        "end": "2014-10-01 07:54:03-07:00",
        "end_reason": "position_updated",
        "start": "2014-09-29 16:59:42-07:00",
        "text": null,
        "type": "No Objection"
      },
      {
        "ad": "Brian Haberman",
        "end": "2014-10-02 04:50:13-07:00",
        "end_reason": "position_updated",
        "start": "2014-10-01 07:54:03-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Brian Haberman",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-02 04:50:13-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Jari Arkko": [
      {
        "ad": "Jari Arkko",
        "end": "2014-10-01 14:28:04-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Jari Arkko",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-01 14:28:04-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Joel Jaeggli": [
      {
        "ad": "Joel Jaeggli",
        "end": "2014-10-01 22:43:34-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Joel Jaeggli",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-01 22:43:34-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Kathleen Moriarty": [
      {
        "ad": "Kathleen Moriarty",
        "end": "2014-09-24 13:24:17-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Kathleen Moriarty",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-09-24 13:24:17-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Martin Stiemerling": [
      {
        "ad": "Martin Stiemerling",
        "end": "2014-09-30 13:13:18-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Stiemerling",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-09-30 13:13:18-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Pete Resnick": [
      {
        "ad": "Pete Resnick",
        "end": "2014-10-01 21:13:41-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Pete Resnick",
        "end": "2014-12-02 20:36:37-08:00",
        "end_reason": "position_updated",
        "start": "2014-10-01 21:13:41-07:00",
        "text": "3.1: Why can't I use an unprotected header when I'm using the Compact Serialization? This seems like a real problem, since I can't convert (in a round-trippable way) between a JWS with an unprotected header in the JSON Serialization to a Compact Serialization. Why the limitation? 5.2: Strike the last sentence of the second paragraph. There's no requirement here. If none of them validate, I can do what I want with the JWS. I needn't \"reject\" it. I might just mark it as \"invalid\". [Get rid of all talk of \"rejecting\" throughout this document. Again, I will note that the signatures are not valid, but rejecting is a local implementation detail.] This section would be greatly simplified if step 1 was: \"If the Compact Serialization is being used, convert it to the JSON Serialization.\" Some of these steps are not steps. I could not follow this to figure out what to do. This section could use a serious rewrite. I'm glad to work with you on that, but did not have time to provide a rewrite during my review. 8: This section needs to be removed. There is no need for TLS in a whole host of applications that could implement this protocol.",
        "type": "Discuss"
      },
      {
        "ad": "Pete Resnick",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-12-02 20:36:37-08:00",
        "text": "I've got some suggestions for improvements below, but overall I cannot support this document, so I'm entering an ABSTAIN. I don't think this WG has actually fulfilled its charter with regard to this document set. The WG was supposed to produce a \"JSON syntax that can be used by applications to describe secure data objects\". I don't believe it did that. Instead, it produced a compact serialization for a particular purpose and then backed into a JSON syntax. The compact serialization drove the effort and produced IMO a substandard JSON serialization. I don't believe that (reliable) interoperable implementations of the JSON serialization will be possible using this document set. However, there is at least rough consensus that these documents are usable as-is, and I don't think there's anything to be gained by holding them up any further. I hope the WG will adopt some of the remaining comments, but my intention is not to discuss this any further. If you wish to address any of the comments and need clarification, I'm glad to help with that. ------ I really wish you would have factored out what's common between JWS and JWE so you didn't have so much repeated text. Throughout: I thought you were changing all \"recipient\"s to \"consumer\"s. I haven't changed them below, but you might want to do a proper search for them. 1: Lose the last paragraph. It's not a core goal. Certainly not in the charter. 2. A \"JSON Web Signature Signature\" is an unfortunate terminology choice. If there is a whole *thing* that is the combination of the header, the signature, and the payload, perhaps that should have been a \"JOSE Web Object\", or better yet a \"JOSE Object\". Then you could simply have \"JOSE Signature\", \"JOSE Payload\", and \"JOSE Header\". I'm also unclear why the word \"Web\" appears in each of these things -- except \"JOSE Header\", which I find equally strange. They should not just be for use on the Web. This whole \"JW*\" terminology thing is goofy. 3. \"JWS object\" is undefined. Please reverse the order of section 3.1 and 3.2. 3.1: Failure to have an unprotected header in the compact serialization means that these things are not round-trippable. That's very unfortunate and I think a failure of the protocol. 3.2: OLD \u00a0  In the JWS JSON Serialization, a JWS object is represented as the \u00a0  combination of these four values, \u00a0 \u00a0 \u00a0 BASE64URL(UTF8(JWS Protected Header)), \u00a0 \u00a0 \u00a0 JWS Unprotected Header, \u00a0 \u00a0 \u00a0 BASE64URL(JWS Payload), and \u00a0 \u00a0 \u00a0 BASE64URL(JWS Signature) NEW \u00a0  In the JSON Serialization, the JWS object is represented as a JSON \u00a0  object with 3 members: \u00a0 \u00a0 \u00a0 header, whose value is JWS Shared Unprotected Header \u00a0 \u00a0 \u00a0 protected, whose value is BASE64URL(UTF8(JWS Protected Header)) \u00a0 \u00a0 \u00a0 payload, whose value is BASE64URL(JWS Payload) \u00a0 \u00a0 \u00a0 signature, whose value is BASE64URL(JWS Signature) (This doesn't account for multiple signatures, and I'd wish you'd clarify what the structure actually looks like, but this is at least better.) Also, there is no need for the Payload to be (a) part of the serialization and (b) base64ed. 3.3: OLD \u00a0  The following example JWS Protected Header declares that the encoded \u00a0  object is a JSON Web Token (JWT) [JWT] and the JWS Protected Header \u00a0  and the JWS Payload are secured using the HMAC SHA-256 [ RFC2104 , SHS] \u00a0  algorithm: There's a couple of typos in there. I think you meant: NEW (1) \u00a0  The following example JWS Protected Header declares that the encoded \u00a0  object is a JSON Web Token (JWT) [JWT] and the JWS Payload is secured \u00a0  using the HMAC SHA-256 [ RFC2104 , SHS] algorithm: However, I'm not clear why that's an example of a *Protected* Header. Looks like it could be any old header. So I think better is: NEW (1) \u00a0  The following example JOSE Header declares that the encoded object is \u00a0  a JSON Web Token (JWT) [JWT] and the JWS Payload is secured using the \u00a0  HMAC SHA-256 [ RFC2104 , SHS] algorithm: Then you would fix: OLD \u00a0  Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected \u00a0  Header)) gives this value: NEW \u00a0  If this were a JWS Protected Header, the encoding of \u00a0  BASE64URL(UTF8(JWS Protected Header)) gives this value: Also: \u00a0  Concatenating these values... This section is not about the compact serialization. If you want to give both example serializations in this section, fine, but if you are giving a general \"Example JWS\" as the title of the section states, don't just give the compact. 4.1.1/4.2: I see no need to mention that the alg could be a \"Collision-Resistant Name\" (what a term!). The alg should be registered. If it's not, you're in private agreement space anyway, so it needn't be specified in the spec. Same thing for Public Header Parameter Names: If you're going to do this interoperably, you're going to have to know what the thing means; otherwise, it's out of band anyway. I say get rid of the whole concept of using non-registered names. 4.1.6: This is a section where you did not clean up the \"reject\" language. Here are my suggested changes: OLD \u00a0  The recipient MUST validate \u00a0  the certificate chain according to  RFC 5280  [ RFC5280 ] and reject the \u00a0  signature if any validation failure occurs. NEW \u00a0  The recipient MUST validate \u00a0  the certificate chain according to  RFC 5280  [ RFC5280 ] and consider \u00a0  the signature invalid if any validation failure occurs. 4.1.11: This is a section where you did not clean up the \"reject\" language. Here are my suggested changes: OLD \u00a0  If any of the listed extension Header \u00a0  Parameters are not understood and supported by the recipient, it MUST \u00a0  reject the JWS. NEW \u00a0  If any of the listed extension Header \u00a0  Parameters are not understood and supported by the recipient, it MUST \u00a0  consider the JWS signature invalid. 5.1: s/MUST perform/performs \u00a0 2. BASE64URLing the payload shouldn't be required. \u00a0 3. Replace everything after the colon with \"the JWS Protected Header \u00a0 and/or the JWS Unprotected Header, as appropriate.\" \u00a0 4. Strike the parenthetical \"(which can only happen...)\". Sounds like you are \u00a0 discouraging use of the JSON Serialization and the Unprotected Header. \u00a0 5. I don't see a need for the second sentence. Delete. \u00a0 8. Replace with \"Create the desired serialized output, as described in \u00a0 Section 7.\" Stop privileging Compact. 5.2: s/MUST be taken/are performed. I made an attempt to untangle the serialization from the actual algorithm. I failed. I think this is likely to be hard to implement strictly from the spec. 10.12: This is a section where you did not clean up the \"reject\" language. Here are my suggested changes: OLD \u00a0  In particular, any JSON inputs not \u00a0  conforming to the JSON-text syntax defined in  RFC 7159  input MUST be \u00a0  rejected in their entirety. NEW \u00a0  In particular, any JSON inputs not \u00a0  conforming to the JSON-text syntax defined in  RFC 7159  input MUST be \u00a0  treated as invalid in their entirety by JWS consumers. OR \u00a0  In particular, any JSON inputs not \u00a0  conforming to the JSON-text syntax defined in  RFC 7159  input MUST be \u00a0  rejected in their entirety by JSON parsers. OLD \u00a0  Such input MUST be rejected in its \u00a0  entirety. NEW \u00a0  JWS consumers MUST treat the signatures of such input as invalid. Appendix E: s/reject/considered invalid/g",
        "type": "Abstain"
      }
    ],
    "Richard Barnes": [
      {
        "ad": "Richard Barnes",
        "end": "2014-10-01 21:21:39-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Richard Barnes",
        "end": "2014-11-03 19:10:51-08:00",
        "end_reason": "discuss_updated",
        "start": "2014-10-01 21:21:39-07:00",
        "text": "Overall, this document is in much more solid shape than when it began.\u00a0 Thanks to the WG for a lot of hard work.\u00a0 I only have two remaining concerns, which should hopefully be easy to address. Section 7.2. I've had several implementors trying to use JWS in the JSON serialization ask why it was necessary to include a \"signatures\" array in cases where there's only one signer.\u00a0 It seems like this is going to be a major barrier to deployment and re-use, so I would propose including the following text: \"\"\" In cases where the JWS has been signed by only a single signer, the \"signatures\" array will contain a single object.\u00a0 In such cases, the elements of the single \"signatures\" object MAY be included at the top level of the JWS object.\u00a0 A JSON-formatted JWS that contains a \"signatures\" field MUST NOT contain a \"protected\", \"header\", or \"signature\" field, and vice versa. \"\"\" This may also require some other changes where \"signatures\" is relied on, e.g., in Section 9 of the JWE spec. Section 6. \"\"\" These Header Parameters MUST be integrity protected if the information that they convey is to be utilized in a trust decision. \"\"\" This smells really fishy to me.\u00a0 What's your attack scenario?\u00a0 I'm pretty certain that there's no way any of these fields can be altered in such a way that (1) the signature will validate, and (2) the recipient will accept a key it shouldn't.\u00a0 By way of contrast, CMS doesn't sign the certificate fields, and the Certificate payload in TLS is only signed as a side effect of the protocol's verification that the remote end has been the same through the whole handshake (which doesn't apply here).",
        "type": "Discuss"
      },
      {
        "ad": "Richard Barnes",
        "end": "2014-11-20 14:19:37-08:00",
        "end_reason": "position_updated",
        "start": "2014-11-03 19:10:51-08:00",
        "text": "Overall, this document is in much more solid shape than when it began.\u00a0 Thanks to the WG for a lot of hard work.\u00a0 I only have one remaining concern, which should hopefully be easy to address. Section 6. \"\"\" These Header Parameters MUST be integrity protected if the information that they convey is to be utilized in a trust decision. \"\"\" This smells really fishy to me.\u00a0 What's your attack scenario?\u00a0 I'm pretty certain that there's no way any of these fields can be altered in such a way that (1) the signature will validate, and (2) the recipient will accept a key it shouldn't.\u00a0 By way of contrast, CMS doesn't sign the certificate fields, and the Certificate payload in TLS is only signed as a side effect of the protocol's verification that the remote end has been the same through the whole handshake (which doesn't apply here).",
        "type": "Discuss"
      },
      {
        "ad": "Richard Barnes",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-11-20 14:19:37-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2014-10-02 08:19:22-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-02 08:19:22-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Stephen Farrell": [
      {
        "ad": "Stephen Farrell",
        "end": "2014-10-02 04:35:34-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Stephen Farrell",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-02 04:35:34-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ted Lemon": [
      {
        "ad": "Ted Lemon",
        "end": "2014-10-02 06:35:54-07:00",
        "end_reason": "new_position",
        "start": "2014-09-24 13:24:16-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ted Lemon",
        "end": "2015-01-16 12:46:12-08:00",
        "end_reason": "evaluation_closed",
        "start": "2014-10-02 06:35:54-07:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc7515",
  "evaluation_end": "2015-01-16 12:46:12-08:00",
  "evaluation_start": "2014-09-24 13:24:16-07:00"
}