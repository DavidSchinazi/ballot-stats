{
  "all_ballots": {
    "Adam Roach": [
      {
        "ad": "Adam Roach",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Alexey Melnikov": [
      {
        "ad": "Alexey Melnikov",
        "end": "2019-02-21 02:38:23-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alexey Melnikov",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-21 02:38:23-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2019-02-21 06:17:35-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-21 06:17:35-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2019-02-20 23:22:49-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 23:22:49-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ben Campbell": [
      {
        "ad": "Ben Campbell",
        "end": "2019-02-20 19:41:56-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ben Campbell",
        "end": "2019-03-29 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2019-02-20 19:41:56-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Benjamin Kaduk": [
      {
        "ad": "Benjamin Kaduk",
        "end": "2019-02-04 18:17:34-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2019-02-20 15:49:09-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-20 15:49:09-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Eric Rescorla": [
      {
        "ad": "Eric Rescorla",
        "end": "2019-02-21 07:03:01-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Eric Rescorla",
        "end": "2019-03-23 21:04:18-07:00",
        "end_reason": "position_updated",
        "start": "2019-02-21 07:03:01-08:00",
        "text": "Rich version of this review at: https://mozphab-ietf.devsvcdev.mozaws.net/D3543 I only had a short time to read this, but I find myself confused about the COMSEC requirements here. There is no COMSEC requirement for the signaling channel in S 2.2. DATA-002 requires a secure COMSEC protocol for the data channel. SEC-001 and SEC-002 require \"peer mutual authentication\" and \"message confidentiality, integrity, and authentication\" according to \"industry best practices\". This doesn't seem to be a requirement which I can verify or evaluate. If \"industry best practices\" were to use raw TCP, would such an implementation be conformant. I think what needs to be required here is cryptographic authentication of both sides and of the messages on both channels. Generally I would prefer to require confidentiality on both, but I could maybe see an argument for why that wasn't needed. DETAIL S 2.2. >\u00a0 \u00a0 \u00a0 \u00a0  free to attempt abbreviated security negotiation methods supported >\u00a0 \u00a0 \u00a0 \u00a0  by the protocol, such as DTLS session resumption, but MUST be >\u00a0 \u00a0 \u00a0 \u00a0  prepared to negotiate new security state with the redirection >\u00a0 \u00a0 \u00a0 \u00a0  target DOTS server.\u00a0 The authentication domain of the redirection >\u00a0 \u00a0 \u00a0 \u00a0  target DOTS server MUST be the same as the authentication domain >\u00a0 \u00a0 \u00a0 \u00a0  of the redirecting DOTS server. what is an \"authentication domain\"? S 2.4. >\u00a0 \u00a0 \u00a0 SEC-002\u00a0 Message Confidentiality, Integrity and Authenticity: DOTS >\u00a0 \u00a0 \u00a0 \u00a0  protocols MUST take steps to protect the confidentiality, >\u00a0 \u00a0 \u00a0 \u00a0  integrity and authenticity of messages sent between client and >\u00a0 \u00a0 \u00a0 \u00a0  server.\u00a0 While specific transport- and message-level security >\u00a0 \u00a0 \u00a0 \u00a0  options are not specified, the protocols MUST follow current >\u00a0 \u00a0 \u00a0 \u00a0  industry best practices for encryption and message authentication. This is not a verifiable conformance requirement",
        "type": "Discuss"
      },
      {
        "ad": "Eric Rescorla",
        "end": "2019-03-29 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2019-03-23 21:04:18-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ignas Bagdonas": [
      {
        "ad": "Ignas Bagdonas",
        "end": "2019-02-21 07:07:44-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ignas Bagdonas",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-21 07:07:44-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Vigoureux": [
      {
        "ad": "Martin Vigoureux",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Mirja Kuhlewind": [
      {
        "ad": "Mirja Kuhlewind",
        "end": "2019-02-20 09:53:24-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Mirja Kuhlewind",
        "end": "2019-03-18 02:39:55-07:00",
        "end_reason": "position_updated",
        "start": "2019-02-20 09:53:24-08:00",
        "text": "Thanks for addressing the TSV-ART comments (and thanks Joe for the review)! In-line with Joe's comment, please see some additional comments below. 1) One minor edit is required still for SIG-002: for PLMTUD the correct reference is  RFC4821 , however, as commented by Joe  RFC1191  is less reliable and therefore usually not recommended. I would recommend to re-add a reference to  RFC4821  and no reference to  RFC1191  (or only with a warning that  RFC4821  is preferred due to ICMP blocking). Further, the correct reference for datagram PLMTUD is draft-ietf-tsvwg-datagram-plpmtud. 2) Also on this text in SIG-004: \"The heartbeat interval during active mitigation could be \u00a0 \u00a0 \u00a0 negotiable, but MUST be frequent enough to maintain any on-path \u00a0 \u00a0 \u00a0 NAT or Firewall bindings during mitigation.\u00a0 When TCP is used as \u00a0 \u00a0 \u00a0 transport, the DOTS signal channel heartbeat messages need to be \u00a0 \u00a0 \u00a0 frequent enough to maintain the TCP connection state.\" As Joe commented already, different heartbeats at different layers can be used at the same time for different purposes. You can use heartbeats at the application layer to check service availability while e.g. using a higher frequent heartbeat at the transport layer to maintain firewall and NAT state. The advantage to such an approach is that there is less application layer overhead/load e.g. in scenarios where it might be expensive to wake up the application or a server is already highly loaded. Also note that the\u00a0 time-outs values of NATs and firewalls on the path are usually unknown, therefore an application can never rely on heartbeats (no matter at which level) and must be prepared to try to reconnect on the application layer if the connection fails. Usually, the main reason for using heartbeats to maintain NAT or firewall state (vs. reconnect every time) in TCP is if the application is time-sensitive and a full TCP handshake takes too long for the desired service. I'm not sure that the case for DOTS, however, I understand it may be beneficial to have established state if an attack is on-going.  For UDP I guess it's more complicated in your case. Time-outs are usually very short, however, state is created with the first packet of a flow (as there is no handshake in UDP). As you don't see blocking if state is expired as new state is created immediately, it's kind of impossible to measure the configured time-out values. Only if the firewall is under attack it would start blocking UDP traffic that is has no state for yet. So I understand why it is desirable to maintain UDP state for you, however, I don't understand how you can know that your frequency is high enough to actually keep the state open. Note that TCP time-outs are usually in the order of hours, while UDP time-outs are usually in range of tens of seconds, and might expire even quicker if a system is under attack. If that is a scenario that is important for you, and assuming that not all time-outs values on the path can be known, I guess it would be recommendable to use TCP instead.  In any case this can not be a MUST requirement (as timers are usually not known). I would recommend to state something like:  \"MAY be frequent enough to maintain NAT or firewall state, if timer values are known, or if TCP is used, SHOULD use in addition TCP heartbeats\u00a0 to maintain the TCP connection state and reconnect immediately if a failure is detected.\" And also for this part it is different for TCP and UDP: \"Because heartbeat loss is much more likely during volumetric attack, DOTS \u00a0 \u00a0 \u00a0 agents SHOULD avoid signal channel termination when mitigation is \u00a0 \u00a0 \u00a0 active and heartbeats are not received by either DOTS agent for an \u00a0 \u00a0 \u00a0 extended period.\" If TCP would be used and no ACKs are received, TCP would try to retransmit a few times and some point terminate the connection. However, UDP is a connection-less protocol, there is nothing to terminate. Also note that for reliable transports, it is sufficient if one end-hosts sends heartbeats as the other end is required to acknowledge the reception on the transport layer (and if no ack is received the connection is terminated on the transport layer).  So I guess what you want to say above is that if a connection-less protocol is used, heartbeats should continuously be sent even if no heartbeats are received from the other end. However, I think you still need to define a termination criteria, as you for sure don't want to keep sending heartbeats forever. Also the next part: \"\u00a0 \u00a0 \u00a0 *\u00a0 To handle possible DOTS server restart or crash, the DOTS \u00a0 \u00a0 \u00a0 \u00a0  clients MAY attempt to establish a new signal channel session, \u00a0 \u00a0 \u00a0 \u00a0  but MUST continue to send heartbeats on the current session so \u00a0 \u00a0 \u00a0 \u00a0  that the DOTS server knows the session is still alive.\u00a0 If the \u00a0 \u00a0 \u00a0 \u00a0  new session is successfully established, the DOTS client can \u00a0 \u00a0 \u00a0 \u00a0  terminate the current session.\" There is nothing like connection re-establishing in UDP, you just keep sending traffic. While in TCP, as explained above, the connection will be terminated at the transport layer and there is no way to keep sending heartbeats on the \"old\" session. Or do have something like DTLS in mind in this case? 3) In SIG-006 you say: \"\u00a0 \u00a0 \u00a0 Due to the higher likelihood of packet loss during a DDoS attack, \u00a0 \u00a0 \u00a0 DOTS servers MUST regularly send mitigation status to authorized \u00a0 \u00a0 \u00a0 DOTS clients which have requested and been granted mitigation, \u00a0 \u00a0 \u00a0 regardless of client requests for mitigation status.\" Please note that this is only true if a not-reliable transport is used. If a reliable transport is used, data is received at the application level without loss (but maybe some delay) or the connection is terminated (if loss is too high to retransmit successfully).",
        "type": "Discuss"
      },
      {
        "ad": "Mirja Kuhlewind",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-03-18 02:39:55-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2019-03-29 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Suresh Krishnan": [
      {
        "ad": "Suresh Krishnan",
        "end": "2019-02-21 06:11:05-08:00",
        "end_reason": "new_position",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Suresh Krishnan",
        "end": "2019-03-05 16:03:06-08:00",
        "end_reason": "discuss_updated",
        "start": "2019-02-21 06:11:05-08:00",
        "text": "I think SIG-002 is a bit underspecified. It points to  draft-ietf-intarea-frag-fragile  as the recommended mechanism for discovering PMTUD, but in fact  draft-ietf-intarea-frag-fragile  is designed to provide a list of potential solutions and recommendations for application and protocol developers (Section 7.1.). So I expect this document to specify what it intends to do for fragmentation instead of a vague reference.  IPv4 does not support a minimum PMTU of 576 as claimed here.  RFC791  clearly states that the minimum PMTU is 68 octets. I suggest rewording this to OLD: DOTS implementations MAY rely on a PMTU of 576 bytes for IPv4 datagrams, as discussed in [ RFC0791 ] and [ RFC1122 ]. NEW: DOTS implementations MAY assume on a PMTU of 576 bytes for IPv4 datagrams, as every IPv4 host must be capable of receiving a packet whose length is equal to 576 bytes as discussed in [ RFC0791 ] and [ RFC1122 ].",
        "type": "Discuss"
      },
      {
        "ad": "Suresh Krishnan",
        "end": "2019-03-05 16:03:30-08:00",
        "end_reason": "position_updated",
        "start": "2019-03-05 16:03:06-08:00",
        "text": "hanks for addressing my DISCUSS and COMMENTs.",
        "type": "Discuss"
      },
      {
        "ad": "Suresh Krishnan",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-03-05 16:03:30-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Terry Manderson": [
      {
        "ad": "Terry Manderson",
        "end": "2019-03-29 00:00:00+00:00",
        "end_reason": "ad_term_ended",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2019-04-09 09:27:45-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-02-04 18:17:34-08:00",
        "text": null,
        "type": "No Record"
      }
    ]
  },
  "doc_name": "rfc8612",
  "evaluation_end": "2019-04-09 09:27:45-07:00",
  "evaluation_start": "2019-02-04 18:17:34-08:00"
}