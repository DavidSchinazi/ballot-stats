{
  "all_ballots": {
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2020-09-23 08:58:57-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-23 08:58:57-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2020-09-24 06:09:57-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-24 06:09:57-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Barry Leiba": [
      {
        "ad": "Barry Leiba",
        "end": "2020-09-04 12:33:32-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Barry Leiba",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-04 12:33:32-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Benjamin Kaduk": [
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-09-23 14:40:15-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-10-02 15:16:56-07:00",
        "end_reason": "position_updated",
        "start": "2020-09-23 14:40:15-07:00",
        "text": "Should we say something about which order the sorting criteria are applied (first to last vs last to first) when multiple sortItems are specified in a query? I recognize that in the HATEOS model, the actual JSONPaths reported by the server should be used by the client to determine what a given sort property does, but it also seems like it would be confusing for this document to specify (e.g.) an \"email\" property with specific JSONPath, and then have a server go off and use \"email\" to mean something else, even if that is just the addition of \"pref\" as discussed at the end of Section 2.3.1.\u00a0 Do we want to try to have the properties defined by this document be universally defined and encourage the use of new/different property names for variations on them?\u00a0 (The answer may well be \"no\", but the answer is not intuitively clear to me.)\u00a0 To put it another way, is the list in Section 2.3.1 normative, or just an example?",
        "type": "Discuss"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-10-02 15:16:56-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2020-09-22 12:58:30-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-22 12:58:30-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Eric Vyncke": [
      {
        "ad": "Eric Vyncke",
        "end": "2020-09-18 06:02:18-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Eric Vyncke",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-18 06:02:18-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Erik Kline": [
      {
        "ad": "Erik Kline",
        "end": "2020-09-20 23:51:54-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Erik Kline",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-20 23:51:54-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Magnus Westerlund": [
      {
        "ad": "Magnus Westerlund",
        "end": "2020-09-24 06:50:04-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Magnus Westerlund",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-24 06:50:04-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Duke": [
      {
        "ad": "Martin Duke",
        "end": "2020-09-15 09:40:08-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Duke",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-15 09:40:08-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Martin Vigoureux": [
      {
        "ad": "Martin Vigoureux",
        "end": "2020-09-24 02:22:47-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Vigoureux",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-24 02:22:47-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Murray Kucherawy": [
      {
        "ad": "Murray Kucherawy",
        "end": "2020-09-24 00:57:21-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Murray Kucherawy",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-24 00:57:21-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Robert Wilton": [
      {
        "ad": "Robert Wilton",
        "end": "2020-09-23 02:09:51-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Robert Wilton",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-23 02:09:51-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Roman Danyliw": [
      {
        "ad": "Roman Danyliw",
        "end": "2020-09-23 06:33:26-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2020-10-02 15:55:40-07:00",
        "end_reason": "position_updated",
        "start": "2020-09-23 06:33:26-07:00",
        "text": "** Canonical Reference for JSONPath.\u00a0 Section 2.1/2.3.1 describes field(s) whose syntax is in JSONPath.\u00a0 The shepherd\u2019s note acknowledges that there is no good reference for JSONPath.\u00a0 Nevertheless, the text needs to be clearer on where to turn to for guidance. (1) Section 2.3.1 says: \u201cSuch a reference could be \u00a0  expressed by using a JSONPath.\u00a0 The JSONPath in a JSON document \u00a0  [ RFC8259 ] is equivalent to the XPath [ W3C.CR -xpath-31-20161213] in a \u00a0  XML document.\u00a0  (2) The JSONPaths are provided according to the Goessner v.0.8.0 \u00a0  specification [GOESSNER-JSON-PATH].  (3) Further documentation about \u00a0  JSONPath operators used in this specification is included in \u00a0  Appendix A. Taking the perspective of the implementer, which of these three resources is canonical for understanding JSONPath: (a) [ W3C.CR -xpath-31-20161213] = a reference marked normative that has nothing to do with JSON but suggests equivalence through a few examples. (b) [GOESSNER-JSON-PATH] = a reference marked as informative which is being used to describe the normative mapping between JSONPaths of the RDAP fields in the text, and is the actual description of the JSONPath syntax.\u00a0 The shepherd\u2019s note points out the difficulty of using this as a normative reference (c) Appendix A = self-contained text which describes JSONPath independent of (a) and (c).\u00a0 As an aside, I\u2019m not sure of the completeness of this write-up. Additionally, the IETF is currently considering it\u2019s own version of JSONPath --  https://datatracker.ietf.org/doc/charter-ietf-jsonpath/ IMO, the fig leaf of citing [ W3C.CR -xpath-31-20161213] is inappropriate (as in, it isn\u2019t the actual reference) and unnecessary (as in, it\u2019s just there to meet the letter of having a normative reference).\u00a0 I recommend being practical about the need: -- Use language to the effect of saying the \u201cJSONPath used here is a flavor defined in XXX\u201d -- Make \u201cXXX\u201d be Appendix A. -- Bolster Appendix A to say something to the effect of \u201cthis version of JSONPath is inspired by [ W3C.CR -xpath-31-20161213] (informative reference) and an articulation of what is used in production [GOESSNER-JSON-PATH] (informative reference)\u201d; and where necessary, add more language around the syntax. This approach will also allow for new JSONPath WG to define a variant which is not strictly compatible (if that\u2019s where the work goes). I\u2019m open to an alternative approach.\u00a0 I just want to end up with a single clear reference of where to read about this documents particular JSONPath syntax. ** Section 2.4.\u00a0 Does this specification provide any normative guidance of \u201ccursor\u201d beyond an opaque value constrained by ABNF?\u00a0 The text notes the notion of \u201coffsets\u201d, \u201climits\u201d, and \u201ckeys\u201d, Base64, CSV but these appear to be referenced as examples.\u00a0 However, Appendix B contains normative language around \u201climit\u201d and \u201coffset\u201d.",
        "type": "Discuss"
      },
      {
        "ad": "Roman Danyliw",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-10-02 15:55:40-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2020-09-23 12:11:53-07:00",
        "end_reason": "new_position",
        "start": "2020-09-04 12:33:31-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Warren Kumari",
        "end": "2020-12-03 14:47:24-08:00",
        "end_reason": "evaluation_closed",
        "start": "2020-09-23 12:11:53-07:00",
        "text": null,
        "type": "No Objection"
      }
    ]
  },
  "doc_name": "rfc8977",
  "evaluation_end": "2020-12-03 14:47:24-08:00",
  "evaluation_start": "2020-09-04 12:33:31-07:00"
}