{
  "all_ballots": {
    "Adam Roach": [
      {
        "ad": "Adam Roach",
        "end": "2018-11-19 21:21:54-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Adam Roach",
        "end": "2018-11-20 06:09:04-08:00",
        "end_reason": "position_updated",
        "start": "2018-11-19 21:21:54-08:00",
        "text": "Thanks for all the work that went into creating this document. I have one point that I think needs discussion, although it's entirely possible that I'm thinking about this the wrong way. \u00a73.8: Given that the list of control operators can be expanded in the future, it's not clear what automated tools are supposed to do if they encounter controls that they do not understand. I initially thought that it might be possible to just ignore control operators (and their parameters) if they aren't understood, as this would simply result in a more permissive validation of data against a schema; but the \".and\" control gives an example of a control operator where this kind of elision would fail. With the lack of any version indicators in CDDL, this seems like a straight-up interoperability issue.",
        "type": "Discuss"
      },
      {
        "ad": "Adam Roach",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-20 06:09:04-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alexey Melnikov": [
      {
        "ad": "Alexey Melnikov",
        "end": "2018-10-26 03:34:28-07:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alexey Melnikov",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "Yes"
      }
    ],
    "Alissa Cooper": [
      {
        "ad": "Alissa Cooper",
        "end": "2018-11-19 11:39:57-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alissa Cooper",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-19 11:39:57-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Alvaro Retana": [
      {
        "ad": "Alvaro Retana",
        "end": "2018-11-19 14:40:25-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Alvaro Retana",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-19 14:40:25-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ben Campbell": [
      {
        "ad": "Ben Campbell",
        "end": "2018-11-20 12:18:01-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Ben Campbell",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-20 12:18:01-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Benjamin Kaduk": [
      {
        "ad": "Benjamin Kaduk",
        "end": "2018-11-18 15:55:21-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Benjamin Kaduk",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-18 15:55:21-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Deborah Brungard": [
      {
        "ad": "Deborah Brungard",
        "end": "2018-11-19 13:15:17-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Deborah Brungard",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-19 13:15:17-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Eric Rescorla": [
      {
        "ad": "Eric Rescorla",
        "end": "2018-11-19 17:46:25-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Eric Rescorla",
        "end": "2019-03-23 21:02:48-07:00",
        "end_reason": "position_updated",
        "start": "2018-11-19 17:46:25-08:00",
        "text": "Rich version of this review at: https://mozphab-ietf.devsvcdev.mozaws.net/D4234 I am marking this document discussed because I have concerns about whether this document can be interoperably implemented. I have noted a number of points below. DETAIL S 3.5.2. >\u00a0 \u00a0 \u00a0 point.) >\u00a0   >\u00a0  3.5.2.\u00a0 Tables >\u00a0   >\u00a0 \u00a0 \u00a0 A table can be specified by defining a map with entries where the >\u00a0 \u00a0 \u00a0 keytype is not single-valued, e.g.: this is the first use of the term single-valued, so I don't know how to interpret this. More generally: it seems like: ``` \u00a0 square-roots = {x => y} \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  x = int \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  y = float ``` Defines a map and yet ``` \u00a0 square-roots = {x => y} \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  y = float ``` Defines a struct. Is that correct? If so, does that mean that I don't know whether something is a map or a struct until I ahve parsed the whole definition? S 3.5.3. >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  mynumber = int / float >\u00a0   >\u00a0  3.5.3.\u00a0 Non-deterministic order >\u00a0   >\u00a0 \u00a0 \u00a0 While the way arrays are matched is fully determined by the Parsing >\u00a0 \u00a0 \u00a0 Expression Grammar (PEG) algorithm, matching is more complicated for PEG is an informative reference, and this text seems to create a normative dependency. S 3.6. >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  * tstr => any >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  } >\u00a0   >\u00a0  3.6.\u00a0 Tags >\u00a0   >\u00a0 \u00a0 \u00a0 A type can make use of a CBOR tag (major type 6) by using the What happens if I define a type twice? Is that permitted? S 3.7. >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  buuid = #6.37(bstr) >\u00a0   >\u00a0 \u00a0 \u00a0 In the following example, usage of the tag 32 for URIs is optional: >\u00a0   >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  my_uri = #6.32(tstr) / tstr >\u00a0   I am basically unable to make sense of this section. Your previous example of tags used #7.25 but here you are specifying everything as using 6. It seems like the semantics here are something to the effect of:  X = #6.Y(Z) means: act as if this were a thing of type Z but it's tagged by Y. Is that correct? But then is this about the wire encoding or the interpretation or both? And in either case, what if what appears on the wire has a different tag. S 3.8.2. >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  cwr: 15, >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ns: 0, >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ) / (4..7) ; data offset bits >\u00a0   >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  rwxbits = uint .bits rwx >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  rwx = &(r: 2, w: 1, x: 0) What is the scope of the definition for r, w, and x? is it global. S 3.9. >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  $$tcp-option //= ( >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  sack-permitted: true >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  ) >\u00a0   >\u00a0 \u00a0 \u00a0 Names that start with a single \"$\" are \"type sockets\", names with a >\u00a0 \u00a0 \u00a0 double \"$$\" are \"group sockets\".\u00a0 It is not an error if there is no what is the difference between these two? S 7.3. >\u00a0 \u00a0 \u00a0 order of the rules given.\u00a0 (It is not an error to extend a rule name >\u00a0 \u00a0 \u00a0 that has not yet been defined; this makes the right hand side the >\u00a0 \u00a0 \u00a0 first entry in the choice being created.) >\u00a0   >\u00a0 \u00a0 \u00a0 genericparm = \"<\" S id S *(\",\" S id S ) \">\" >\u00a0 \u00a0 \u00a0 genericarg = \"<\" S type1 S *(\",\" S type1 S ) \">\" What is the meaning of\u00a0 ",
        "type": "Discuss"
      },
      {
        "ad": "Eric Rescorla",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2019-03-23 21:02:48-07:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Ignas Bagdonas": [
      {
        "ad": "Ignas Bagdonas",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Martin Vigoureux": [
      {
        "ad": "Martin Vigoureux",
        "end": "2018-11-21 00:56:14-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Martin Vigoureux",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-21 00:56:14-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Mirja Kuhlewind": [
      {
        "ad": "Mirja Kuhlewind",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      }
    ],
    "Spencer Dawkins": [
      {
        "ad": "Spencer Dawkins",
        "end": "2018-11-20 18:16:21-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Spencer Dawkins",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-20 18:16:21-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Suresh Krishnan": [
      {
        "ad": "Suresh Krishnan",
        "end": "2018-11-21 06:33:26-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Suresh Krishnan",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-21 06:33:26-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Terry Manderson": [
      {
        "ad": "Terry Manderson",
        "end": "2018-11-20 20:00:19-08:00",
        "end_reason": "new_position",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      },
      {
        "ad": "Terry Manderson",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-11-20 20:00:19-08:00",
        "text": null,
        "type": "No Objection"
      }
    ],
    "Warren Kumari": [
      {
        "ad": "Warren Kumari",
        "end": "2019-03-25 05:41:08-07:00",
        "end_reason": "evaluation_closed",
        "start": "2018-10-26 03:34:28-07:00",
        "text": null,
        "type": "No Record"
      }
    ]
  },
  "doc_name": "rfc8610",
  "evaluation_end": "2019-03-25 05:41:08-07:00",
  "evaluation_start": "2018-10-26 03:34:28-07:00"
}